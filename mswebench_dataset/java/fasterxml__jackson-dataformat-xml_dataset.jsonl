{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": 644, "state": "closed", "title": "Fix #643: Add `ToXmlGenerator.Feature` or allowing XML Schema/JAXB compatible Infinity representation", "body": "This PR adds a `ToXmlGenerator.Feature` to use XML Schema-compatible representation for floating-point infinity.\r\n\r\nFixes #643.", "base": {"label": "FasterXML:2.17", "ref": "2.17", "sha": "b782f4b9559ece1b6178cbeafa8acffb0ab9d0f0"}, "resolved_issues": [{"number": 643, "title": "XML serialization of floating-point infinity is incompatible with JAXB and XML Schema", "body": "As of version 2.16.1, infinite values of `float` and `double` are serialized in a way that is incompatible with [the XML Schema definition](https://www.w3.org/TR/xmlschema-2/#double) and JAXB. Specifically, jackson-dataformat-xml serializes these values as the strings `Infinity` or `-Infinity`. XML Schema, however, says they should be serialized as `INF` or `-INF`, and that is what JAXB does.\r\n\r\n<details>\r\n<summary>Example program (click to show)</summary>\r\n\r\n```java\r\npackage org.example;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\r\nimport java.io.IOException;\r\nimport java.io.StringReader;\r\nimport java.io.StringWriter;\r\nimport javax.xml.bind.JAXB;\r\nimport javax.xml.bind.annotation.XmlElement;\r\nimport javax.xml.bind.annotation.XmlRootElement;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tExampleObject original, deserialized;\r\n\t\tString serialized;\r\n\r\n\t\toriginal = new ExampleObject();\r\n\t\toriginal.x = Double.POSITIVE_INFINITY;\r\n\t\toriginal.y = Double.NEGATIVE_INFINITY;\r\n\t\toriginal.z = Double.NaN;\r\n\t\toriginal.fx = Float.POSITIVE_INFINITY;\r\n\t\toriginal.fy = Float.NEGATIVE_INFINITY;\r\n\t\toriginal.fz = Float.NaN;\r\n\r\n\t\tSystem.out.println(\"--- Jackson serialization ---\");\r\n\t\tserialized = serializeWithJackson(original);\r\n\t\tSystem.out.println(serialized);\r\n\r\n\t\tSystem.out.println(\"--- Jackson deserialization ---\");\r\n\t\tdeserialized = deserializeWithJackson(serialized);\r\n\t\tSystem.out.println(deserialized);\r\n\r\n\t\tSystem.out.println(\"--- JAXB serialization ---\");\r\n\t\tserialized = serializeWithJaxb(original);\r\n\t\tSystem.out.println(serialized);\r\n\r\n\t\tSystem.out.println(\"--- JAXB deserialization ---\");\r\n\t\tdeserialized = deserializeWithJaxb(serialized);\r\n\t\tSystem.out.println(deserialized);\r\n\r\n\t\tSystem.out.println(\"--- serialized with JAXB, deserialized with Jackson ---\");\r\n\t\tdeserialized = deserializeWithJackson(serialized);\r\n\t\tSystem.out.println(deserialized);\r\n\r\n\t\tSystem.out.println(\"--- serialized with Jackson, deserialized with JAXB ---\");\r\n\t\tserialized = serializeWithJackson(original);\r\n\t\tdeserialized = deserializeWithJaxb(serialized);\r\n\t\tSystem.out.println(deserialized);\r\n\t}\r\n\r\n\tprivate static String serializeWithJackson(ExampleObject object) throws IOException {\r\n\t\tvar buf = new StringWriter();\r\n\t\tnew XmlMapper().writeValue(buf, object);\r\n\t\treturn buf.toString();\r\n\t}\r\n\r\n\tprivate static ExampleObject deserializeWithJackson(String xml) throws JsonProcessingException {\r\n\t\treturn new XmlMapper().readValue(xml, ExampleObject.class);\r\n\t}\r\n\r\n\tprivate static String serializeWithJaxb(ExampleObject object) {\r\n\t\tvar buf = new StringWriter();\r\n\t\tJAXB.marshal(object, buf);\r\n\t\treturn buf.toString();\r\n\t}\r\n\r\n\tprivate static ExampleObject deserializeWithJaxb(String xml) {\r\n\t\treturn JAXB.unmarshal(new StringReader(xml), ExampleObject.class);\r\n\t}\r\n}\r\n\r\n@XmlRootElement(name = \"example\")\r\nclass ExampleObject {\r\n\t@XmlElement\r\n\tpublic double x, y, z;\r\n\r\n\t@XmlElement\r\n\tpublic float fx, fy, fz;\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn String.format(\"x=%f y=%f z=%f fx=%f fy=%f fz=%f\", x, y, z, fx, fy, fz);\r\n\t}\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Maven POM for example program (click to show)</summary>\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\r\n\t<groupId>org.example</groupId>\r\n\t<artifactId>jackson-xml-double</artifactId>\r\n\t<version>1.0-SNAPSHOT</version>\r\n\r\n\t<properties>\r\n\t\t<maven.compiler.source>17</maven.compiler.source>\r\n\t\t<maven.compiler.target>17</maven.compiler.target>\r\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n\t</properties>\r\n\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\r\n\t\t\t<artifactId>jackson-databind</artifactId>\r\n\t\t\t<version>2.16.1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\r\n\t\t\t<artifactId>jackson-annotations</artifactId>\r\n\t\t\t<version>2.16.1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.fasterxml.jackson.dataformat</groupId>\r\n\t\t\t<artifactId>jackson-dataformat-xml</artifactId>\r\n\t\t\t<version>2.16.1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>javax.xml.bind</groupId>\r\n\t\t\t<artifactId>jaxb-api</artifactId>\r\n\t\t\t<version>2.3.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.glassfish.jaxb</groupId>\r\n\t\t\t<artifactId>jaxb-runtime</artifactId>\r\n\t\t\t<version>2.3.3</version>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n</project>\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Output from example program (click to show)</summary>\r\n\r\n```\r\n--- Jackson serialization ---\r\n<ExampleObject><x>Infinity</x><y>-Infinity</y><z>NaN</z><fx>Infinity</fx><fy>-Infinity</fy><fz>NaN</fz></ExampleObject>\r\n--- Jackson deserialization ---\r\nx=Infinity y=-Infinity z=NaN fx=Infinity fy=-Infinity fz=NaN\r\n--- JAXB serialization ---\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<example>\r\n    <x>INF</x>\r\n    <y>-INF</y>\r\n    <z>NaN</z>\r\n    <fx>INF</fx>\r\n    <fy>-INF</fy>\r\n    <fz>NaN</fz>\r\n</example>\r\n\r\n--- JAXB deserialization ---\r\nx=Infinity y=-Infinity z=NaN fx=Infinity fy=-Infinity fz=NaN\r\n--- serialized with JAXB, deserialized with Jackson ---\r\nx=Infinity y=-Infinity z=NaN fx=Infinity fy=-Infinity fz=NaN\r\n--- serialized with Jackson, deserialized with JAXB ---\r\nx=0.000000 y=0.000000 z=NaN fx=0.000000 fy=0.000000 fz=NaN\r\n```\r\n\r\n</details>\r\n\r\nAs the example program's output shows, Jackson understands both its own format and the XML Schema format for floating-point infinity. JAXB, however, understands only the XML Schema format, and fails to parse Jackson's format.\r\n\r\nThe problem seems to be that jackson-dataformat-xml calls [`TypedXMLStreamWriter` methods](https://github.com/FasterXML/jackson-dataformat-xml/blob/7101dc8bfb2d90290dced0d128d323a013853ace/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java#L1158) to serialize floating-point values, which ultimately uses [`NumberUtil.write{Float,Double}` from StAX2](https://github.com/FasterXML/stax2-api/blob/67d598842d99266a43d7ecf839c2b1f0f70f2bdc/src/main/java/org/codehaus/stax2/ri/typed/NumberUtil.java#L322), which in turn uses `java.lang.String.valueOf` to serialize the number, without any special handling of infinity.\r\n\r\n**De**serialization of XML Schema-formatted numbers seems to work correctly. Only serialization has an issue.\r\n\r\nThis issue only affects positive and negative infinity. `java.lang.String.valueOf` differs from XML Schema only in how it represents infinity; it uses the same format as XML Schema for NaN and finite values."}], "fix_patch": "diff --git a/release-notes/CREDITS-2.x b/release-notes/CREDITS-2.x\nindex 5ba8e773..6a3a9586 100644\n--- a/release-notes/CREDITS-2.x\n+++ b/release-notes/CREDITS-2.x\n@@ -249,3 +249,9 @@ Arthur Chan (@arthurscchan)\n * Reported, contributed fix for #618: `ArrayIndexOutOfBoundsException` thrown for invalid\n   ending XML string when using JDK default Stax XML parser\n  (2.17.0)\n+\n+Alex H (@ahcodedthat)\n+\n+* Contribtued #643: XML serialization of floating-point infinity is incompatible\n+  with JAXB and XML Schema\n+ (2.17.0)\ndiff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x\nindex d9cd9be2..a4ddecee 100644\n--- a/release-notes/VERSION-2.x\n+++ b/release-notes/VERSION-2.x\n@@ -18,6 +18,9 @@ Project: jackson-dataformat-xml\n   (FromXmlParser.Feature.AUTO_DETECT_XSI_TYPE)\n #637: `JacksonXmlAnnotationIntrospector.findNamespace()` should\n   properly merge namespace information\n+#643: XML serialization of floating-point infinity is incompatible\n+  with JAXB and XML Schema\n+ (contributed by Alex H)\n * Upgrade Woodstox to 6.6.1 (latest at the time)\n \n 2.16.1 (24-Dec-2023)\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\nindex 73c4e673..7721faeb 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n@@ -106,6 +106,37 @@ public enum Feature implements FormatFeature\n          * @since 2.17\n          */\n         AUTO_DETECT_XSI_TYPE(false),\n+\n+        /**\n+         * Feature that determines how floating-point infinity values are\n+         * serialized.\n+         *<p>\n+         * By default, {@link Float#POSITIVE_INFINITY} and\n+         * {@link Double#POSITIVE_INFINITY} are serialized as {@code Infinity},\n+         * and {@link Float#NEGATIVE_INFINITY} and\n+         * {@link Double#NEGATIVE_INFINITY} are serialized as\n+         * {@code -Infinity}. This is the representation that Java normally\n+         * uses for these values (see {@link Float#toString(float)} and\n+         * {@link Double#toString(double)}), but JAXB and other XML\n+         * Schema-conforming readers won't understand it.\n+         *<p>\n+         * With this feature enabled, these values are instead serialized as\n+         * {@code INF} and {@code -INF}, respectively. This is the\n+         * representation that XML Schema and JAXB use (see the XML Schema\n+         * primitive types\n+         * <a href=\"https://www.w3.org/TR/xmlschema-2/#float\"><code>float</code></a>\n+         * and\n+         * <a href=\"https://www.w3.org/TR/xmlschema-2/#double\"><code>double</code></a>).\n+         *<p>\n+         * When deserializing, Jackson always understands both representations,\n+         * so there is no corresponding\n+         * {@link com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature}.\n+         *<p>\n+         * Feature is disabled by default for backwards compatibility.\n+         *\n+         * @since 2.17\n+         */\n+        WRITE_XML_SCHEMA_CONFORMING_FLOATS(false),\n         ;\n \n         final boolean _defaultState;\n@@ -1174,6 +1205,11 @@ public void writeNumber(long l) throws IOException\n     @Override\n     public void writeNumber(double d) throws IOException\n     {\n+        if (Double.isInfinite(d) && isEnabled(Feature.WRITE_XML_SCHEMA_CONFORMING_FLOATS)) {\n+            writeNumber(d > 0d ? \"INF\" : \"-INF\");\n+            return;\n+        }\n+\n         _verifyValueWrite(\"write number\");\n         if (_nextName == null) {\n             handleMissingName();\n@@ -1202,6 +1238,11 @@ public void writeNumber(double d) throws IOException\n     @Override\n     public void writeNumber(float f) throws IOException\n     {\n+        if (Float.isInfinite(f) && isEnabled(Feature.WRITE_XML_SCHEMA_CONFORMING_FLOATS)) {\n+            writeNumber(f > 0f ? \"INF\" : \"-INF\");\n+            return;\n+        }\n+\n         _verifyValueWrite(\"write number\");\n         if (_nextName == null) {\n             handleMissingName();\n", "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java\nindex 0d493201..de4b490c 100644\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java\n@@ -1,9 +1,9 @@\n package com.fasterxml.jackson.dataformat.xml.ser;\n \n-import java.io.*;\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData;\n@@ -31,6 +31,22 @@ static class AttrAndElem\n         public int attr = 42;\n     }\n \n+    static class Floats\n+    {\n+        public float elem;\n+\n+        @JacksonXmlProperty(isAttribute=true, localName=\"attr\")\n+        public float attr;\n+    }\n+\n+    static class Doubles\n+    {\n+        public double elem;\n+\n+        @JacksonXmlProperty(isAttribute=true, localName=\"attr\")\n+        public double attr;\n+    }\n+\n     static class WrapperBean<T>\n     {\n         public T value;\n@@ -81,14 +97,14 @@ static class CustomMap extends LinkedHashMap<String, Integer> { }\n \n     private final XmlMapper _xmlMapper = new XmlMapper();\n \n-    public void testSimpleAttribute() throws IOException\n+    public void testSimpleAttribute() throws Exception\n     {\n         String xml = _xmlMapper.writeValueAsString(new AttributeBean());\n         xml = removeSjsxpNamespace(xml);\n         assertEquals(\"<AttributeBean attr=\\\"something\\\"/>\", xml);\n     }\n \n-    public void testSimpleNsElem() throws IOException\n+    public void testSimpleNsElem() throws Exception\n     {\n         String xml = _xmlMapper.writeValueAsString(new NsElemBean());\n         xml = removeSjsxpNamespace(xml);\n@@ -96,7 +112,7 @@ public void testSimpleNsElem() throws IOException\n         assertEquals(\"<NsElemBean><wstxns1:text xmlns:wstxns1=\\\"http://foo\\\">blah</wstxns1:text></NsElemBean>\", xml);\n     }\n \n-    public void testSimpleNsElemWithJsonProp() throws IOException\n+    public void testSimpleNsElemWithJsonProp() throws Exception\n     {\n         String xml = _xmlMapper.writeValueAsString(new NsElemBean2());\n         xml = removeSjsxpNamespace(xml);\n@@ -104,14 +120,14 @@ public void testSimpleNsElemWithJsonProp() throws IOException\n         assertEquals(\"<NsElemBean2><wstxns1:text xmlns:wstxns1=\\\"http://foo\\\">blah</wstxns1:text></NsElemBean2>\", xml);\n     }\n     \n-    public void testSimpleAttrAndElem() throws IOException\n+    public void testSimpleAttrAndElem() throws Exception\n     {\n         String xml = _xmlMapper.writeValueAsString(new AttrAndElem());\n         xml = removeSjsxpNamespace(xml);\n         assertEquals(\"<AttrAndElem id=\\\"42\\\"><elem>whatever</elem></AttrAndElem>\", xml);\n     }\n \n-    public void testMap() throws IOException\n+    public void testMap() throws Exception\n     {\n         // First, map in a general wrapper\n         LinkedHashMap<String,Integer> map = new LinkedHashMap<String,Integer>();\n@@ -136,7 +152,7 @@ public void testMap() throws IOException\n                 xml);\n     }\n \n-    public void testNakedMap() throws IOException\n+    public void testNakedMap() throws Exception\n     {\n         CustomMap input = new CustomMap();        \n         input.put(\"a\", 123);\n@@ -152,14 +168,14 @@ public void testNakedMap() throws IOException\n         assertEquals(Integer.valueOf(456), result.get(\"b\"));\n     }\n \n-    public void testCDataString() throws IOException\n+    public void testCDataString() throws Exception\n     {\n         String xml = _xmlMapper.writeValueAsString(new CDataStringBean());\n         xml = removeSjsxpNamespace(xml);\n         assertEquals(\"<CDataStringBean><value><![CDATA[<some<data\\\"]]></value></CDataStringBean>\", xml);\n     }\n \n-    public void testCDataStringArray() throws IOException\n+    public void testCDataStringArray() throws Exception\n     {\n         String xml = _xmlMapper.writeValueAsString(new CDataStringArrayBean());\n         xml = removeSjsxpNamespace(xml);\n@@ -175,4 +191,62 @@ public void testJAXB() throws Exception\n         System.out.println(\"JAXB -> \"+sw);\n     }\n     */\n+\n+    public void testFloatInfinity() throws Exception\n+    {\n+        Floats infinite = new Floats();\n+        infinite.attr = Float.POSITIVE_INFINITY;\n+        infinite.elem = Float.NEGATIVE_INFINITY;\n+\n+        Floats finite = new Floats();\n+        finite.attr = 42.5f;\n+        finite.elem = 1337.875f;\n+\n+        checkFloatInfinity(infinite, false, \"<Floats attr=\\\"Infinity\\\"><elem>-Infinity</elem></Floats>\");\n+        checkFloatInfinity(finite, false, \"<Floats attr=\\\"42.5\\\"><elem>1337.875</elem></Floats>\");\n+        checkFloatInfinity(infinite, true, \"<Floats attr=\\\"INF\\\"><elem>-INF</elem></Floats>\");\n+        checkFloatInfinity(finite, true, \"<Floats attr=\\\"42.5\\\"><elem>1337.875</elem></Floats>\");\n+    }\n+\n+    private void checkFloatInfinity(Floats original, boolean xmlSchemaConforming, String expectedXml) throws Exception\n+    {\n+        _xmlMapper.configure(ToXmlGenerator.Feature.WRITE_XML_SCHEMA_CONFORMING_FLOATS, xmlSchemaConforming);\n+\n+        String xml = _xmlMapper.writeValueAsString(original);\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(expectedXml, xml);\n+\n+        Floats deserialized = _xmlMapper.readValue(xml, Floats.class);\n+        assertEquals(original.attr, deserialized.attr);\n+        assertEquals(original.elem, deserialized.elem);\n+    }\n+\n+    public void testDoubleInfinity() throws Exception\n+    {\n+        Doubles infinite = new Doubles();\n+        infinite.attr = Double.POSITIVE_INFINITY;\n+        infinite.elem = Double.NEGATIVE_INFINITY;\n+\n+        Doubles finite = new Doubles();\n+        finite.attr = 42.5d;\n+        finite.elem = 1337.875d;\n+\n+        checkDoubleInfinity(infinite, false, \"<Doubles attr=\\\"Infinity\\\"><elem>-Infinity</elem></Doubles>\");\n+        checkDoubleInfinity(finite, false, \"<Doubles attr=\\\"42.5\\\"><elem>1337.875</elem></Doubles>\");\n+        checkDoubleInfinity(infinite, true, \"<Doubles attr=\\\"INF\\\"><elem>-INF</elem></Doubles>\");\n+        checkDoubleInfinity(finite, true, \"<Doubles attr=\\\"42.5\\\"><elem>1337.875</elem></Doubles>\");\n+    }\n+\n+    private void checkDoubleInfinity(Doubles original, boolean xmlSchemaConforming, String expectedXml) throws Exception\n+    {\n+        _xmlMapper.configure(ToXmlGenerator.Feature.WRITE_XML_SCHEMA_CONFORMING_FLOATS, xmlSchemaConforming);\n+\n+        String xml = _xmlMapper.writeValueAsString(original);\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(expectedXml, xml);\n+\n+        Doubles deserialized = _xmlMapper.readValue(xml, Doubles.class);\n+        assertEquals(original.attr, deserialized.attr);\n+        assertEquals(original.elem, deserialized.elem);\n+    }\n }\n", "fixed_tests": {"com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.woodstox.DeepNestingWoodstoxParserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.SerializationNameMergingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestViews": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.VersionInfoTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.ImplicitParamsForCreatorTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.FeatureDefaultsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiTypeReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.MapperCopyTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.IterationType302Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationWithFilter": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.dos.CyclicXMLDataSerTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz618_64655_InvalidXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiTypeWriteTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.woodstox.NonNamespaceAwareDeser422Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}}, "p2p_tests": {}, "f2p_tests": {}, "s2p_tests": {}, "n2p_tests": {"com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.woodstox.DeepNestingWoodstoxParserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.SerializationNameMergingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestViews": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.VersionInfoTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.ImplicitParamsForCreatorTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.FeatureDefaultsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiTypeReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.MapperCopyTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.IterationType302Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationWithFilter": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.dos.CyclicXMLDataSerTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz618_64655_InvalidXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiTypeWriteTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.woodstox.NonNamespaceAwareDeser422Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}}, "run_result": {"passed_count": 127, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.ImplicitParamsForCreatorTest", "com.fasterxml.jackson.dataformat.xml.FeatureDefaultsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiTypeReadTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.ser.IterationType302Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationWithFilter", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz618_64655_InvalidXMLTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.woodstox.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test", "com.fasterxml.jackson.dataformat.xml.woodstox.DeepNestingWoodstoxParserTest", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.ser.SerializationNameMergingTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.ser.dos.CyclicXMLDataSerTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiTypeWriteTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 127, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.ImplicitParamsForCreatorTest", "com.fasterxml.jackson.dataformat.xml.FeatureDefaultsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiTypeReadTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.ser.IterationType302Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationWithFilter", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz618_64655_InvalidXMLTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.woodstox.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test", "com.fasterxml.jackson.dataformat.xml.woodstox.DeepNestingWoodstoxParserTest", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.ser.SerializationNameMergingTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.ser.dos.CyclicXMLDataSerTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiTypeWriteTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "instance_id": "fasterxml__jackson-dataformat-xml-644"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": 638, "state": "closed", "title": "Fix #637: merge namespace information properly", "body": null, "base": {"label": "FasterXML:2.17", "ref": "2.17", "sha": "ac00d648e9b424f4b6c4d7aaaa23abf50adc1b5a"}, "resolved_issues": [{"number": 637, "title": "`JacksonXmlAnnotationIntrospector.findNamespace()` should properly merge namespace information", "body": "(note: offshoot of #628)\r\n\r\nLooks like method `findNamepace()` in `JacksonXmlAnnotationIntrospector` is considering both `@JsonProperty` and `@JacksonXmlNamespace` (latter having precedence) but does not support case like so:\r\n\r\n```\r\n       @JsonProperty(value=\"value\", namespace=\"uri:ns1\")\r\n        @JacksonXmlProperty(isAttribute=true)\r\n        public int valueDefault = 42;\r\n```\r\n\r\nin which `@JacksonXmlProperty` does not define namespace (that is, is left as \"\", empty String).\r\nIn such case it should then return `namespace` value of `@JsonProperty` instead.\r\n\r\nIdeally in future we could simply use methods from `AnnotationIntrospection` -- `findNameForSerialization()` and `findNameForDeserializaiton` -- which also expose \"namespace\", but on short term let's handle merging better.\r\n\r\n\r\n\r\n"}], "fix_patch": "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x\nindex d2f7f756..9f5174b9 100644\n--- a/release-notes/VERSION-2.x\n+++ b/release-notes/VERSION-2.x\n@@ -16,6 +16,8 @@ Project: jackson-dataformat-xml\n   `XmlMapper.createParser(XMLStreamReader)` overloads\n #634: Support use of xsi:type for polymorphic deserialization\n   (FromXmlParser.Feature.AUTO_DETECT_XSI_TYPE)\n+#637: `JacksonXmlAnnotationIntrospector.findNamespace()` should\n+  properly merge namespace information\n * Upgrade Woodstox to 6.6.0 (latest at the time)\n \n 2.16.1 (24-Dec-2023)\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\nindex a86914fc..144c4582 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n@@ -117,16 +117,27 @@ public PropertyName findRootName(AnnotatedClass ac)\n     @Override\n     public String findNamespace(MapperConfig<?> config, Annotated ann)\n     {\n-        JacksonXmlProperty prop = _findAnnotation(ann, JacksonXmlProperty.class);\n-        if (prop != null) {\n-            return prop.namespace();\n+        String ns1 = null;\n+        JacksonXmlProperty xmlProp = _findAnnotation(ann, JacksonXmlProperty.class);\n+        if (xmlProp != null) {\n+            ns1 = xmlProp.namespace();\n         }\n         // 14-Nov-2020, tatu: 2.12 adds namespace for this too\n         JsonProperty jprop = _findAnnotation(ann, JsonProperty.class);\n+        String ns2 = null;\n         if (jprop != null) {\n-            return jprop.namespace();\n+            ns2 = jprop.namespace();\n         }\n-        return null;\n+        if (ns1 == null) {\n+            return ns2;\n+        }\n+        if (ns2 == null) {\n+            return ns1;\n+        }\n+        if (ns1.isEmpty()) {\n+            return ns2;\n+        }\n+        return ns1;\n     }\n \n     /**\n", "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/SerializationNameMergingTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/SerializationNameMergingTest.java\nnew file mode 100644\nindex 00000000..52759a71\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/SerializationNameMergingTest.java\n@@ -0,0 +1,29 @@\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+// [dataformat-xml#637]\n+public class SerializationNameMergingTest extends XmlTestBase\n+{\n+    // [dataformat-xml#637]\n+    static class NamesBean {\n+        // XML annotations have precedence over default/standard/json ones\n+        // but local name, namespace should be merged\n+        @JsonProperty(value=\"value\", namespace=\"uri:ns1\")\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int valueDefault = 42;\n+    }\n+\n+    private final XmlMapper MAPPER = newMapper();\n+\n+\n+    // [dataformat-xml#637]\n+    public void testNamespaceMerging637() throws Exception\n+    {\n+        assertEquals(a2q(\"<NamesBean xmlns:wstxns1='uri:ns1' wstxns1:value='42'/>\"),\n+                MAPPER.writeValueAsString(new NamesBean()));\n+    }\n+}\n", "fixed_tests": {"com.fasterxml.jackson.dataformat.xml.ser.SerializationNameMergingTest": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "p2p_tests": {"com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.woodstox.DeepNestingWoodstoxParserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestViews": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.VersionInfoTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.FeatureDefaultsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiTypeReadTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.MapperCopyTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.IterationType302Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationWithFilter": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.dos.CyclicXMLDataSerTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz618_64655_InvalidXMLTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiTypeWriteTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.woodstox.NonNamespaceAwareDeser422Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"com.fasterxml.jackson.dataformat.xml.ser.SerializationNameMergingTest": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {}, "run_result": {"passed_count": 125, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.FeatureDefaultsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiTypeReadTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.ser.IterationType302Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationWithFilter", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz618_64655_InvalidXMLTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.woodstox.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test", "com.fasterxml.jackson.dataformat.xml.woodstox.DeepNestingWoodstoxParserTest", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.ser.dos.CyclicXMLDataSerTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiTypeWriteTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 125, "failed_count": 1, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.FeatureDefaultsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiTypeReadTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.ser.IterationType302Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationWithFilter", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz618_64655_InvalidXMLTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.woodstox.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test", "com.fasterxml.jackson.dataformat.xml.woodstox.DeepNestingWoodstoxParserTest", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.ser.dos.CyclicXMLDataSerTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiTypeWriteTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": ["com.fasterxml.jackson.dataformat.xml.ser.SerializationNameMergingTest"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 126, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.FeatureDefaultsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiTypeReadTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.ser.IterationType302Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationWithFilter", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz618_64655_InvalidXMLTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.woodstox.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test", "com.fasterxml.jackson.dataformat.xml.woodstox.DeepNestingWoodstoxParserTest", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.ser.SerializationNameMergingTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.ser.dos.CyclicXMLDataSerTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiTypeWriteTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "instance_id": "fasterxml__jackson-dataformat-xml-638"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": 590, "state": "closed", "title": "Fix #578 (@JsonAppend properties serialized twice)", "body": null, "base": {"label": "FasterXML:2.15", "ref": "2.15", "sha": "a18b8cd98e94660dcac19bd2cd11f376705d7745"}, "resolved_issues": [{"number": 578, "title": "`XmlMapper` serializes `@JsonAppend` property twice", "body": "### Discussed in https://github.com/FasterXML/jackson-databind/discussions/3806\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **stepince** March  5, 2023</sup>\r\nXmlMapper is serializing jsonAppend virtual property twice.  ObjectMapper for json works correctly.\r\n\r\njackson version: 2.14.1\r\n\r\n```\r\npublic class VirtualBeanPropertyWriterTest {\r\n    @Test\r\n    public void testJsonAppend() throws Exception {\r\n        ObjectMapper mapper = new XmlMapper();\r\n        String xml = mapper.writeValueAsString(new Pojo(\"foo\"));\r\n        assertEquals(\"<Pojo><name>foo</name><virtual>bar</virtual></Pojo>\",xml);\r\n    }\r\n\r\n    @JsonAppend(props = @JsonAppend.Prop(name = \"virtual\", value = MyVirtualPropertyWriter.class))\r\n    public static class Pojo {\r\n        private final String name;\r\n\r\n        public Pojo(String name) {\r\n            this.name = name;\r\n        }\r\n        public String getName() {\r\n            return name;\r\n        }\r\n    }\r\n\r\n    public static class MyVirtualPropertyWriter extends VirtualBeanPropertyWriter {\r\n        public MyVirtualPropertyWriter() {}\r\n\r\n        protected MyVirtualPropertyWriter(BeanPropertyDefinition propDef, Annotations contextAnnotations,\r\n                                          JavaType declaredType) {\r\n            super(propDef, contextAnnotations, declaredType);\r\n        }\r\n\r\n        @Override\r\n        protected Object value(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\r\n            return \"bar\";\r\n        }\r\n\r\n        @Override\r\n        public VirtualBeanPropertyWriter withConfig(MapperConfig<?> config, AnnotatedClass declaringClass,\r\n                                                    BeanPropertyDefinition propDef, JavaType type) {\r\n\r\n            return new MyVirtualPropertyWriter(propDef, declaringClass.getAnnotations(), type);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\noutput\r\n\r\n```\r\norg.opentest4j.AssertionFailedError: \r\nExpected :`<Pojo><name>foo</name><virtual>bar</virtual></Pojo>`\r\nActual   :`<Pojo><name>foo</name><virtual>bar</virtual><virtual>bar</virtual></Pojo>`\r\n</div>\r\n```"}], "fix_patch": "diff --git a/release-notes/VERSION-2.x b/release-notes/VERSION-2.x\nindex 96bd89247..a43128fee 100644\n--- a/release-notes/VERSION-2.x\n+++ b/release-notes/VERSION-2.x\n@@ -4,6 +4,11 @@ Project: jackson-dataformat-xml\n === Releases ===\n ------------------------------------------------------------------------\n \n+Not yet released\n+\n+#578: `XmlMapper` serializes `@JsonAppend` property twice\n+ (reported by @stepince)\n+\n 2.15.0-rc2 (28-Mar-2023)\n \n #286: Conflict between `@JsonIdentityInfo` and Unwrapped Lists\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\nindex f2b375550..8080d540f 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n@@ -1,12 +1,14 @@\n package com.fasterxml.jackson.dataformat.xml;\n \n import java.lang.annotation.Annotation;\n+import java.util.List;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.dataformat.xml.annotation.*;\n \n /**\n@@ -124,6 +126,19 @@ public String findNamespace(MapperConfig<?> config, Annotated ann)\n         return null;\n     }\n \n+    /**\n+     * Due to issue [dataformat-xml#578] need to suppress calls to this method\n+     * to avoid duplicate virtual properties from being added. Not elegant\n+     * but .. works.\n+     *\n+     * @since 2.15\n+     */\n+    @Override\n+    public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac,\n+            List<BeanPropertyWriter> properties) {\n+        return;\n+    }\n+\n     /*\n     /**********************************************************************\n     /* XmlAnnotationIntrospector, isXxx methods\n", "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend578Test.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/JsonAppend578Test.java\nsimilarity index 93%\nrename from src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend578Test.java\nrename to src/test/java/com/fasterxml/jackson/dataformat/xml/ser/JsonAppend578Test.java\nindex f543901b6..7543faaea 100644\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/JsonAppend578Test.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/JsonAppend578Test.java\n@@ -1,4 +1,4 @@\n-package com.fasterxml.jackson.dataformat.xml.failing;\n+package com.fasterxml.jackson.dataformat.xml.ser;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n@@ -53,6 +53,6 @@ public VirtualBeanPropertyWriter withConfig(MapperConfig<?> config, AnnotatedCla\n     // [dataformat-xml#578]: Duplication of virtual properties\n     public void testJsonAppend() throws Exception {\n         String xml = MAPPER.writeValueAsString(new Pojo578(\"foo\"));\n-        assertEquals(\"<Pojo><name>foo</name><virtual>bar</virtual></Pojo>\",xml);\n+        assertEquals(\"<Pojo578><name>foo</name><virtual>bar</virtual></Pojo578>\",xml);\n     }\n }\n", "fixed_tests": {"com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "p2p_tests": {"com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestViews": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.VersionInfoTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.MapperCopyTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test": {"run": "NONE", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {}, "run_result": {"passed_count": 117, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 117, "failed_count": 1, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": ["com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 118, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.ser.XmlPrettyPrinterTest", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.lists.StringListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappedJsonIdentityConflict286Test", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObject76Test", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NoArgCtorDeser491Test", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.deser.creator.PojoWithCreatorRequired538Test", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.stream.dos.DeepNestingParserTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.creator.NestedSingleArgCtors547Test", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.ser.JsonAppend578Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.deser.MapWithDupsDeser498Test", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "instance_id": "fasterxml__jackson-dataformat-xml-590"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": 544, "state": "closed", "title": "Support unwrapping in `@JsonRawValue` serialization", "body": "Fixes #545 ", "base": {"label": "FasterXML:2.14", "ref": "2.14", "sha": "6c03760102474a0e38f0f52cdaef2a88e7133598"}, "resolved_issues": [{"number": 545, "title": "`@JacksonXmlText` does not work when paired with `@JsonRawValue`", "body": "I apologize if there's a similar issue already opened - I didn't find anything when searching.\r\n\r\n**Describe the bug**\r\nWhen a field has both the `@JsonRawValue` and the `@JacksonXmlText` annotations, the `@JacksonXlmText` annotation has no effect.\r\n\r\n**Version information**\r\ncom.fasterxml.jackson.core:jackson-annotations:2.13.3\r\ncom.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.3\r\n\r\n**To Reproduce**\r\n\r\n```java\r\n@JacksonXmlRootElement(localName = \"test-pojo\")\r\npublic class TestPojo {\r\n     @JacksonXmlProperty(isAttribute = true)\r\n     String id;\r\n\r\n     @JacksonXmlText\r\n     @JsonRawValue\r\n     String value;\r\n}\r\n\r\n//....\r\n\r\nTestPojo sut = new TestPojo();\r\nsut.id = \"123\";\r\nsut.value = \"<a>A</a><b someAttribute=\\\"B\\\">B</b>\";\r\n```\r\n\r\nActual output:\r\n\r\n```xml\r\n<test-pojo>\r\n    <id>123</id>\r\n     <value>\r\n         <a>A</a>\r\n         <b someAttribute=\"B\">B</b>\r\n     </value>\r\n</test-pojo>\r\n```\r\n\r\n\r\nExpected output:\r\n\r\n```xml\r\n<test-pojo>\r\n    <id>123</id>\r\n    <a>A</a><b someAttribute=\"B\">B</b>\r\n</test-pojo>\r\n```\r\n\r\n\r\n**Additional context**\r\n\r\n* I tried cheating the system, by included a `@JsonProperty(\"\")` annotation on the `value` field, it had no effect."}], "fix_patch": "diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\nindex 00f051d68..f43309c2b 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n@@ -732,6 +732,8 @@ public void writeRawValue(String text) throws IOException {\n \n             if (_nextIsAttribute) {\n                 _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n+            } else if (checkNextIsUnwrapped()) {\n+                _xmlWriter.writeRaw(text);\n             } else {\n                 _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                 _xmlWriter.writeRaw(text);\n@@ -756,6 +758,8 @@ public void writeRawValue(String text, int offset, int len) throws IOException {\n \n             if (_nextIsAttribute) {\n                 _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len));\n+            } else if (checkNextIsUnwrapped()) {\n+                _xmlWriter.writeRaw(text, offset, len);\n             } else {\n                 _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                 _xmlWriter.writeRaw(text, offset, len);\n@@ -779,6 +783,8 @@ public void writeRawValue(char[] text, int offset, int len) throws IOException {\n         try {\n             if (_nextIsAttribute) {\n                 _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));\n+            } else if (checkNextIsUnwrapped()) {\n+                _xmlWriter.writeRaw(text, offset, len);\n             } else {\n                 _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n                 _xmlWriter.writeRaw(text, offset, len);\n", "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java\nindex 6bfc69faa..ee7d66009 100644\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java\n@@ -2,10 +2,12 @@\n \n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonRawValue;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText;\n+import org.junit.Assert;\n \n public class XmlTextTest extends XmlTestBase\n {\n@@ -44,6 +46,12 @@ static class Radius {\n         public int value;\n     }\n \n+    static class RawValue {\n+        @JacksonXmlText\n+        @JsonRawValue\n+        public String foo = \"<a>b</a>\";\n+    }\n+\n         \n     /*\n     /**********************************************************\n@@ -79,4 +87,11 @@ public void testSimple198() throws Exception\n         Phone result = MAPPER.readValue(xml, Phone.class);\n         assertNotNull(result);\n     }\n+\n+    // for [dataformat-xml#3581]\n+    public void testRawValue() throws Exception\n+    {\n+        String xml = MAPPER.writeValueAsString(new RawValue());\n+        Assert.assertEquals(\"<RawValue><a>b</a></RawValue>\", xml);\n+    }\n }\ndiff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlGeneratorTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlGeneratorTest.java\nindex f6ff0f882..9852322c8 100644\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlGeneratorTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlGeneratorTest.java\n@@ -183,6 +183,60 @@ public void testRawCharArrayValue() throws Exception\n         assertEquals(\"<root><elem>value</elem></root>\", xml);\n     }\n \n+    public void testRawSimpleValueUnwrapped() throws Exception\n+    {\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = XML_F.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.setNextIsUnwrapped(true);\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(\"value\");\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root>value</root>\", xml);\n+    }\n+\n+    public void testRawOffsetValueUnwrapped() throws Exception\n+    {\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = XML_F.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.setNextIsUnwrapped(true);\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(\"NotAValue_value_NotAValue\", 10, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root>value</root>\", xml);\n+    }\n+\n+    public void testRawCharArrayValueUnwrapped() throws Exception\n+    {\n+        StringWriter out = new StringWriter();\n+        ToXmlGenerator gen = XML_F.createGenerator(out);\n+        // root name is special, need to be fed first:\n+        gen.setNextName(new QName(\"root\"));\n+        gen.writeStartObject();\n+        gen.setNextIsUnwrapped(true);\n+        gen.writeFieldName(\"elem\");\n+        gen.writeRawValue(new char[] {'!', 'v', 'a', 'l', 'u', 'e', '!'}, 1, 5);\n+        gen.writeEndObject();\n+        gen.close();\n+        String xml = out.toString();\n+        // one more thing: remove that annoying 'xmlns' decl, if it's there:\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<root>value</root>\", xml);\n+    }\n+\n     public void testRawSimpleAttribute() throws Exception\n     {\n         StringWriter out = new StringWriter();\n", "fixed_tests": {"com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": {"run": "PASS", "test": "FAIL", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest": {"run": "PASS", "test": "FAIL", "fix": "PASS"}}, "p2p_tests": {"com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestIndentation": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestViews": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.VersionInfoTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.MapperCopyTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test": {"run": "PASS", "test": "PASS", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest": {"run": "PASS", "test": "PASS", "fix": "PASS"}}, "f2p_tests": {"com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": {"run": "PASS", "test": "FAIL", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest": {"run": "PASS", "test": "FAIL", "fix": "PASS"}}, "s2p_tests": {}, "n2p_tests": {}, "run_result": {"passed_count": 109, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.ser.TestIndentation", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 107, "failed_count": 2, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.ser.TestIndentation", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": ["com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest"], "skipped_tests": []}, "fix_patch_result": {"passed_count": 109, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.ser.TestIndentation", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "instance_id": "fasterxml__jackson-dataformat-xml-544"}
{"org": "fasterxml", "repo": "jackson-dataformat-xml", "number": 531, "state": "closed", "title": "Add mechanism for processing invalid XML names (transforming to valid ones)", "body": "This commit introduces the `PROCESS_ESCAPED_MALFORMED_TAGS` and\r\n`ESCAPE_MALFORMED_TAGS` features that control whether invalid\r\ntag names will be escaped with an attribute.\r\n\r\nfixes #523\r\nfixes #524", "base": {"label": "FasterXML:2.14", "ref": "2.14", "sha": "f406e23f5e15efb3d930e826204c06e00a23f8e3"}, "resolved_issues": [{"number": 524, "title": "Dollars in POJO property names are not escaped on serialization", "body": "Example:\r\n\r\n```java\r\npackage it;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\r\n\r\npublic class Dollar {\r\n\r\n    public static class DTO {\r\n        public String thisStringIs$Fancy$ = \"Hello World!\";\r\n    }\r\n\r\n    public static void main(String ... args) throws JsonProcessingException {\r\n        DTO dto = new DTO();\r\n\r\n        XmlMapper mapper = new XmlMapper();\r\n\r\n        final String res = mapper.writeValueAsString(dto);\r\n\r\n        // <DTO><thisStringIs$Fancy$>Hello World!</thisStringIs$Fancy$></DTO>\r\n        System.out.println(res);\r\n\r\n        // ERROR!\r\n        // com.fasterxml.jackson.core.JsonParseException: Unexpected character '$' (code 36) excepted space, or '>' or \"/>\"\r\n        mapper.readValue(res, DTO.class);\r\n    }\r\n\r\n}\r\n```\r\n\r\njackson version: 2.13.2"}], "fix_patch": "diff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\nindex e41f11b1e..bd0e6bba9 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n@@ -65,6 +65,8 @@ public class XmlFactory extends JsonFactory\n     protected transient XMLOutputFactory _xmlOutputFactory;\n \n     protected String _cfgNameForTextElement;\n+\n+    protected XmlTagProcessor _tagProcessor;\n     \n     /*\n     /**********************************************************\n@@ -102,11 +104,18 @@ public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut\n                 xmlIn, xmlOut, null);\n     }\n \n+    public XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\n+                         XMLInputFactory xmlIn, XMLOutputFactory xmlOut,\n+                         String nameForTextElem) {\n+        this(oc, xpFeatures, xgFeatures, xmlIn, xmlOut, nameForTextElem, XmlTagProcessors.newPassthroughProcessor());\n+    }\n+\n     protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\n             XMLInputFactory xmlIn, XMLOutputFactory xmlOut,\n-            String nameForTextElem)\n+            String nameForTextElem, XmlTagProcessor tagProcessor)\n     {\n         super(oc);\n+        _tagProcessor = tagProcessor;\n         _xmlParserFeatures = xpFeatures;\n         _xmlGeneratorFeatures = xgFeatures;\n         _cfgNameForTextElement = nameForTextElem;\n@@ -140,6 +149,7 @@ protected XmlFactory(XmlFactory src, ObjectCodec oc)\n         _cfgNameForTextElement = src._cfgNameForTextElement;\n         _xmlInputFactory = src._xmlInputFactory;\n         _xmlOutputFactory = src._xmlOutputFactory;\n+        _tagProcessor = src._tagProcessor;\n     }\n \n     /**\n@@ -155,6 +165,7 @@ protected XmlFactory(XmlFactoryBuilder b)\n         _cfgNameForTextElement = b.nameForTextElement();\n         _xmlInputFactory = b.xmlInputFactory();\n         _xmlOutputFactory = b.xmlOutputFactory();\n+        _tagProcessor = b.xmlTagProcessor();\n         _initFactories(_xmlInputFactory, _xmlOutputFactory);\n     }\n \n@@ -325,6 +336,14 @@ public int getFormatGeneratorFeatures() {\n         return _xmlGeneratorFeatures;\n     }\n \n+    public XmlTagProcessor getXmlTagProcessor() {\n+        return _tagProcessor;\n+    }\n+\n+    public void setXmlTagProcessor(XmlTagProcessor _tagProcessor) {\n+        this._tagProcessor = _tagProcessor;\n+    }\n+\n     /*\n     /******************************************************\n     /* Configuration, XML, generator settings\n@@ -498,7 +517,7 @@ public ToXmlGenerator createGenerator(OutputStream out, JsonEncoding enc) throws\n         ctxt.setEncoding(enc);\n         return new ToXmlGenerator(ctxt,\n                 _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(ctxt, out));\n+                _objectCodec, _createXmlWriter(ctxt, out), _tagProcessor);\n     }\n     \n     @Override\n@@ -507,7 +526,7 @@ public ToXmlGenerator createGenerator(Writer out) throws IOException\n         final IOContext ctxt = _createContext(_createContentReference(out), false);\n         return new ToXmlGenerator(ctxt,\n                 _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(ctxt, out));\n+                _objectCodec, _createXmlWriter(ctxt, out), _tagProcessor);\n     }\n \n     @SuppressWarnings(\"resource\")\n@@ -519,7 +538,7 @@ public ToXmlGenerator createGenerator(File f, JsonEncoding enc) throws IOExcepti\n         final IOContext ctxt = _createContext(_createContentReference(out), true);\n         ctxt.setEncoding(enc);\n         return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(ctxt, out));\n+                _objectCodec, _createXmlWriter(ctxt, out), _tagProcessor);\n     }\n \n     /*\n@@ -543,7 +562,7 @@ public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n \n         // false -> not managed\n         FromXmlParser xp = new FromXmlParser(_createContext(_createContentReference(sr), false),\n-                _parserFeatures, _xmlParserFeatures, _objectCodec, sr);\n+                _parserFeatures, _xmlParserFeatures, _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n@@ -562,7 +581,7 @@ public ToXmlGenerator createGenerator(XMLStreamWriter sw) throws IOException\n         sw = _initializeXmlWriter(sw);\n         IOContext ctxt = _createContext(_createContentReference(sw), false);\n         return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, sw);\n+                _objectCodec, sw, _tagProcessor);\n     }\n \n     /*\n@@ -582,7 +601,7 @@ protected FromXmlParser _createParser(InputStream in, IOContext ctxt) throws IOE\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n-                _objectCodec, sr);\n+                _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n@@ -600,7 +619,7 @@ protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOExcepti\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n-                _objectCodec, sr);\n+                _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n@@ -627,7 +646,7 @@ protected FromXmlParser _createParser(char[] data, int offset, int len, IOContex\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n-                _objectCodec, sr);\n+                _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\n@@ -651,7 +670,7 @@ protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContex\n         }\n         sr = _initializeXmlReader(sr);\n         FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures,\n-                _objectCodec, sr);\n+                _objectCodec, sr, _tagProcessor);\n         if (_cfgNameForTextElement != null) {\n             xp.setXMLTextElementName(_cfgNameForTextElement);\n         }\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactoryBuilder.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactoryBuilder.java\nindex 2c83ddd96..7771fa6ff 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactoryBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactoryBuilder.java\n@@ -63,6 +63,13 @@ public class XmlFactoryBuilder extends TSFBuilder<XmlFactory, XmlFactoryBuilder>\n      */\n     protected ClassLoader _classLoaderForStax;\n \n+    /**\n+     * See {@link XmlTagProcessor} and {@link XmlTagProcessors}\n+     *\n+     * @since 2.14\n+     */\n+    protected XmlTagProcessor _tagProcessor;\n+\n     /*\n     /**********************************************************\n     /* Life cycle\n@@ -73,6 +80,7 @@ protected XmlFactoryBuilder() {\n         _formatParserFeatures = XmlFactory.DEFAULT_XML_PARSER_FEATURE_FLAGS;\n         _formatGeneratorFeatures = XmlFactory.DEFAULT_XML_GENERATOR_FEATURE_FLAGS;\n         _classLoaderForStax = null;\n+        _tagProcessor = XmlTagProcessors.newPassthroughProcessor();\n     }\n \n     public XmlFactoryBuilder(XmlFactory base) {\n@@ -82,6 +90,7 @@ public XmlFactoryBuilder(XmlFactory base) {\n         _xmlInputFactory = base._xmlInputFactory;\n         _xmlOutputFactory = base._xmlOutputFactory;\n         _nameForTextElement = base._cfgNameForTextElement;\n+        _tagProcessor = base._tagProcessor;\n         _classLoaderForStax = null;\n     }\n \n@@ -133,6 +142,10 @@ protected ClassLoader staxClassLoader() {\n                 getClass().getClassLoader() : _classLoaderForStax;\n     }\n \n+    public XmlTagProcessor xmlTagProcessor() {\n+        return _tagProcessor;\n+    }\n+\n     // // // Parser features\n \n     public XmlFactoryBuilder enable(FromXmlParser.Feature f) {\n@@ -253,6 +266,14 @@ public XmlFactoryBuilder staxClassLoader(ClassLoader cl) {\n         _classLoaderForStax = cl;\n         return _this();\n     }\n+\n+    /**\n+     * @since 2.14\n+     */\n+    public XmlFactoryBuilder xmlTagProcessor(XmlTagProcessor tagProcessor) {\n+        _tagProcessor = tagProcessor;\n+        return _this();\n+    }\n     \n     // // // Actual construction\n \ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\nindex c8650f308..44b5a2301 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n@@ -108,6 +108,14 @@ public Builder defaultUseWrapper(boolean state) {\n             _mapper.setDefaultUseWrapper(state);\n             return this;\n         }\n+\n+        /**\n+         * @since 2.14\n+         */\n+        public Builder xmlTagProcessor(XmlTagProcessor tagProcessor) {\n+            _mapper.setXmlTagProcessor(tagProcessor);\n+            return this;\n+        }\n     }\n \n     protected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\n@@ -280,6 +288,20 @@ public XmlMapper setDefaultUseWrapper(boolean state) {\n         return this;\n     }\n \n+    /**\n+     * @since 2.14\n+     */\n+    public void setXmlTagProcessor(XmlTagProcessor tagProcessor) {\n+        ((XmlFactory)_jsonFactory).setXmlTagProcessor(tagProcessor);\n+    }\n+\n+    /**\n+     * @since 2.14\n+     */\n+    public XmlTagProcessor getXmlTagProcessor() {\n+        return ((XmlFactory)_jsonFactory).getXmlTagProcessor();\n+    }\n+\n     /*\n     /**********************************************************\n     /* Access to configuration settings\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessor.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessor.java\nnew file mode 100644\nindex 000000000..a27d9311a\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessor.java\n@@ -0,0 +1,60 @@\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * XML tag name processor primarily used for dealing with tag names\n+ * containing invalid characters. Invalid characters in tags can,\n+ * for instance, easily appear in map keys.\n+ * <p>\n+ * Processors should be set in the {@link XmlMapper#setXmlTagProcessor(XmlTagProcessor)}\n+ * and/or the {@link XmlMapper.Builder#xmlTagProcessor(XmlTagProcessor)} methods.\n+ * <p>\n+ * See {@link XmlTagProcessors} for default processors.\n+ *\n+ * @since 2.14\n+ */\n+public interface XmlTagProcessor extends Serializable {\n+\n+    /**\n+     * Representation of an XML tag name\n+     */\n+    class XmlTagName {\n+        public final String namespace;\n+        public final String localPart;\n+\n+        public XmlTagName(String namespace, String localPart) {\n+            this.namespace = namespace;\n+            this.localPart = localPart;\n+        }\n+    }\n+\n+\n+    /**\n+     * Used during XML serialization.\n+     * <p>\n+     * This method should process the provided {@link XmlTagName} and\n+     * escape / encode invalid XML characters.\n+     *\n+     * @param tag The tag to encode\n+     * @return The encoded tag name\n+     */\n+    XmlTagName encodeTag(XmlTagName tag);\n+\n+\n+    /**\n+     * Used during XML deserialization.\n+     * <p>\n+     * This method should process the provided {@link XmlTagName} and\n+     * revert the encoding done in the {@link #encodeTag(XmlTagName)}\n+     * method.\n+     * <p>\n+     * Note: Depending on the use case, it is not always required (or\n+     * even possible) to reverse an encoding with 100% accuracy.\n+     *\n+     * @param tag The tag to encode\n+     * @return The encoded tag name\n+     */\n+    XmlTagName decodeTag(XmlTagName tag);\n+\n+}\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessors.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessors.java\nnew file mode 100644\nindex 000000000..715636524\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTagProcessors.java\n@@ -0,0 +1,212 @@\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.util.Base64;\n+import java.util.regex.Pattern;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Contains default XML tag name processors.\n+ * <p>\n+ * Processors should be set in the {@link XmlMapper#setXmlTagProcessor(XmlTagProcessor)}\n+ * and/or the {@link XmlMapper.Builder#xmlTagProcessor(XmlTagProcessor)} methods.\n+ *\n+ * @since 2.14\n+ */\n+public final class XmlTagProcessors {\n+\n+    /**\n+     * Generates a new tag processor that does nothing and just passes through the\n+     * tag names. Using this processor may generate invalid XML.\n+     * <p>\n+     * With this processor set, a map with the keys {@code \"123\"} and\n+     * {@code \"$ I am <fancy>! &;\"} will be written as:\n+     *\n+     * <pre>{@code\n+     * <DTO>\n+     *     <badMap>\n+     *         <$ I am <fancy>! &;>xyz</$ I am <fancy>! &;>\n+     *         <123>bar</123>\n+     *     </badMap>\n+     * </DTO>\n+     * }</pre>\n+     * <p>\n+     * This is the default behavior for backwards compatibility.\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newPassthroughProcessor() {\n+        return new PassthroughTagProcessor();\n+    }\n+\n+    /**\n+     * Generates a new tag processor that replaces all invalid characters in an\n+     * XML tag name with a replacement string. This is a one-way processor, since\n+     * there is no way to reverse this replacement step.\n+     * <p>\n+     * With this processor set (and {@code \"_\"} as the replacement string), a map\n+     * with the keys {@code \"123\"} and {@code \"$ I am <fancy>! &;\"} will be written as:\n+     *\n+     * <pre>{@code\n+     * <DTO>\n+     *     <badMap>\n+     *         <__I_am__fancy_____>xyz</__I_am__fancy_____>\n+     *         <_23>bar</_23>\n+     *     </badMap>\n+     * </DTO>\n+     * }</pre>\n+     *\n+     * @param replacement The replacement string to replace invalid characters with\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newReplacementProcessor(String replacement) {\n+        return new ReplaceTagProcessor(replacement);\n+    }\n+\n+    /**\n+     * Equivalent to calling {@link #newReplacementProcessor(String)} with {@code \"_\"}\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newReplacementProcessor() {\n+        return newReplacementProcessor(\"_\");\n+    }\n+\n+    /**\n+     * Generates a new tag processor that escapes all tag names containing invalid\n+     * characters with base64. Here the\n+     * <a href=\"https://datatracker.ietf.org/doc/html/rfc4648#section-5\">base64url</a>\n+     * encoder and decoders are used. The {@code =} padding characters are\n+     * always omitted.\n+     * <p>\n+     * With this processor set, a map with the keys {@code \"123\"} and\n+     * {@code \"$ I am <fancy>! &;\"} will be written as:\n+     *\n+     * <pre>{@code\n+     * <DTO>\n+     *     <badMap>\n+     *         <base64_tag_JCBJIGFtIDxmYW5jeT4hICY7>xyz</base64_tag_JCBJIGFtIDxmYW5jeT4hICY7>\n+     *         <base64_tag_MTIz>bar</base64_tag_MTIz>\n+     *     </badMap>\n+     * </DTO>\n+     * }</pre>\n+     *\n+     * @param prefix The prefix to use for tags that are escaped\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newBase64Processor(String prefix) {\n+        return new Base64TagProcessor(prefix);\n+    }\n+\n+    /**\n+     * Equivalent to calling {@link #newBase64Processor(String)} with {@code \"base64_tag_\"}\n+     *\n+     * @since 2.14\n+     */\n+    public static XmlTagProcessor newBase64Processor() {\n+        return newBase64Processor(\"base64_tag_\");\n+    }\n+\n+    /**\n+     * Similar to {@link #newBase64Processor(String)}, however, tag names will\n+     * <b>always</b> be escaped with base64. No magic prefix is required\n+     * for this case, since adding one would be redundant because all tags will\n+     * be base64 encoded.\n+     */\n+    public static XmlTagProcessor newAlwaysOnBase64Processor() {\n+        return new AlwaysOnBase64TagProcessor();\n+    }\n+\n+\n+\n+    private static class PassthroughTagProcessor implements XmlTagProcessor {\n+        @Override\n+        public XmlTagName encodeTag(XmlTagName tag) {\n+            return tag;\n+        }\n+\n+        @Override\n+        public XmlTagName decodeTag(XmlTagName tag) {\n+            return tag;\n+        }\n+    }\n+\n+    private static class ReplaceTagProcessor implements XmlTagProcessor {\n+        private static final Pattern BEGIN_MATCHER = Pattern.compile(\"^[^a-zA-Z_:]\");\n+        private static final Pattern MAIN_MATCHER = Pattern.compile(\"[^a-zA-Z0-9_:-]\");\n+\n+        private final String _replacement;\n+\n+        private ReplaceTagProcessor(String replacement) {\n+            _replacement = replacement;\n+        }\n+\n+        @Override\n+        public XmlTagName encodeTag(XmlTagName tag) {\n+            String newLocalPart = tag.localPart;\n+            newLocalPart = BEGIN_MATCHER.matcher(newLocalPart).replaceAll(_replacement);\n+            newLocalPart = MAIN_MATCHER.matcher(newLocalPart).replaceAll(_replacement);\n+\n+            return new XmlTagName(tag.namespace, newLocalPart);\n+        }\n+\n+        @Override\n+        public XmlTagName decodeTag(XmlTagName tag) {\n+            return tag;\n+        }\n+    }\n+\n+    private static class Base64TagProcessor implements XmlTagProcessor {\n+        private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();\n+        private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();\n+        private static final Pattern VALID_XML_TAG = Pattern.compile(\"[a-zA-Z_:]([a-zA-Z0-9_:.-])*\");\n+\n+        private final String _prefix;\n+\n+        private Base64TagProcessor(String prefix) {\n+            _prefix = prefix;\n+        }\n+\n+        @Override\n+        public XmlTagName encodeTag(XmlTagName tag) {\n+            if (VALID_XML_TAG.matcher(tag.localPart).matches()) {\n+                return tag;\n+            }\n+            final String encoded = new String(BASE64_ENCODER.encode(tag.localPart.getBytes(UTF_8)), UTF_8);\n+            return new XmlTagName(tag.namespace, _prefix + encoded);\n+        }\n+\n+        @Override\n+        public XmlTagName decodeTag(XmlTagName tag) {\n+            if (!tag.localPart.startsWith(_prefix)) {\n+                return tag;\n+            }\n+            String localName = tag.localPart;\n+            localName = localName.substring(_prefix.length());\n+            localName = new String(BASE64_DECODER.decode(localName), UTF_8);\n+            return new XmlTagName(tag.namespace, localName);\n+        }\n+    }\n+\n+    private static class AlwaysOnBase64TagProcessor implements XmlTagProcessor {\n+        private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();\n+        private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();\n+\n+        @Override\n+        public XmlTagName encodeTag(XmlTagName tag) {\n+            return new XmlTagName(tag.namespace, new String(BASE64_ENCODER.encode(tag.localPart.getBytes(UTF_8)), UTF_8));\n+        }\n+\n+        @Override\n+        public XmlTagName decodeTag(XmlTagName tag) {\n+            return new XmlTagName(tag.namespace, new String(BASE64_DECODER.decode(tag.localPart), UTF_8));\n+        }\n+    }\n+\n+\n+    private XmlTagProcessors() {\n+        // Nothing to do here\n+    }\n+}\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\nindex 41156fde2..ab4d744b1 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n@@ -19,6 +19,8 @@\n \n import com.fasterxml.jackson.dataformat.xml.PackageVersion;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessor;\n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessors;\n import com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet;\n import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n \n@@ -252,7 +254,7 @@ private Feature(boolean defaultState) {\n      */\n \n     public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n-            ObjectCodec codec, XMLStreamReader xmlReader)\n+             ObjectCodec codec, XMLStreamReader xmlReader, XmlTagProcessor tagProcessor)\n         throws IOException\n     {\n         super(genericParserFeatures);\n@@ -261,7 +263,7 @@ public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures,\n         _objectCodec = codec;\n         _parsingContext = XmlReadContext.createRootContext(-1, -1);\n         _xmlTokens = new XmlTokenStream(xmlReader, ctxt.contentReference(),\n-                    _formatFeatures);\n+                    _formatFeatures, tagProcessor);\n \n         final int firstToken;\n         try {\ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\nindex d72051736..11ac6204d 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n@@ -5,6 +5,7 @@\n import javax.xml.XMLConstants;\n import javax.xml.stream.*;\n \n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessor;\n import org.codehaus.stax2.XMLStreamLocation2;\n import org.codehaus.stax2.XMLStreamReader2;\n import org.codehaus.stax2.ri.Stax2ReaderAdapter;\n@@ -73,6 +74,8 @@ public class XmlTokenStream\n \n     protected boolean _cfgProcessXsiNil;\n \n+    protected XmlTagProcessor _tagProcessor;\n+\n     /*\n     /**********************************************************************\n     /* Parsing state\n@@ -153,12 +156,13 @@ public class XmlTokenStream\n      */\n \n     public XmlTokenStream(XMLStreamReader xmlReader, ContentReference sourceRef,\n-            int formatFeatures)\n+            int formatFeatures, XmlTagProcessor tagProcessor)\n     {\n         _sourceReference = sourceRef;\n         _formatFeatures = formatFeatures;\n         _cfgProcessXsiNil = FromXmlParser.Feature.PROCESS_XSI_NIL.enabledIn(_formatFeatures);\n         _xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);\n+        _tagProcessor = tagProcessor;\n     }\n \n     /**\n@@ -177,6 +181,7 @@ public int initialize() throws XMLStreamException\n         _namespaceURI = _xmlReader.getNamespaceURI();\n \n         _checkXsiAttributes(); // sets _attributeCount, _nextAttributeIndex\n+        _decodeXmlTagName();\n \n         // 02-Jul-2020, tatu: Two choices: if child elements OR attributes, expose\n         //    as Object value; otherwise expose as Text\n@@ -646,6 +651,7 @@ private final int _initStartElement() throws XMLStreamException\n         }\n         _localName = localName;\n         _namespaceURI = ns;\n+        _decodeXmlTagName();\n         return (_currentState = XML_START_ELEMENT);\n     }\n \n@@ -675,6 +681,15 @@ private final void _checkXsiAttributes() {\n         _xsiNilFound = false;\n     }\n \n+    /**\n+     * @since 2.14\n+     */\n+    protected void _decodeXmlTagName() {\n+        XmlTagProcessor.XmlTagName tagName = _tagProcessor.decodeTag(new XmlTagProcessor.XmlTagName(_namespaceURI, _localName));\n+        _namespaceURI = tagName.namespace;\n+        _localName = tagName.localPart;\n+    }\n+\n     /**\n      * Method called to handle details of repeating \"virtual\"\n      * start/end elements, needed for handling 'unwrapped' lists.\n@@ -695,6 +710,7 @@ protected int _handleRepeatElement() throws XMLStreamException\n //System.out.println(\" XMLTokenStream._handleRepeatElement() for END_ELEMENT: \"+_localName+\" (\"+_xmlReader.getLocalName()+\")\");\n             _localName = _xmlReader.getLocalName();\n             _namespaceURI = _xmlReader.getNamespaceURI();\n+            _decodeXmlTagName();\n             if (_currentWrapper != null) {\n                 _currentWrapper = _currentWrapper.getParent();\n             }\n@@ -708,6 +724,7 @@ protected int _handleRepeatElement() throws XMLStreamException\n             _namespaceURI = _nextNamespaceURI;\n             _nextLocalName = null;\n             _nextNamespaceURI = null;\n+            _decodeXmlTagName();\n \n //System.out.println(\" XMLTokenStream._handleRepeatElement() for START_DELAYED: \"+_localName+\" (\"+_xmlReader.getLocalName()+\")\");\n \ndiff --git a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\nindex 00f051d68..90b898ba4 100644\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n@@ -10,6 +10,7 @@\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamWriter;\n \n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessor;\n import org.codehaus.stax2.XMLStreamWriter2;\n import org.codehaus.stax2.ri.Stax2WriterAdapter;\n \n@@ -152,6 +153,13 @@ private Feature(boolean defaultState) {\n      */\n     protected XmlPrettyPrinter _xmlPrettyPrinter;\n \n+    /**\n+     * Escapes tag names with invalid XML characters\n+     *\n+     * @since 2.14\n+     */\n+    protected XmlTagProcessor _tagProcessor;\n+\n     /*\n     /**********************************************************\n     /* XML Output state\n@@ -205,7 +213,7 @@ private Feature(boolean defaultState) {\n      */\n \n     public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures,\n-            ObjectCodec codec, XMLStreamWriter sw)\n+            ObjectCodec codec, XMLStreamWriter sw, XmlTagProcessor tagProcessor)\n     {\n         super(stdFeatures, codec);\n         _formatFeatures = xmlFeatures;\n@@ -213,6 +221,7 @@ public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures,\n         _originalXmlWriter = sw;\n         _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw);\n         _stax2Emulation = (_xmlWriter != sw);\n+        _tagProcessor = tagProcessor;\n         _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ?\n         \t\t(XmlPrettyPrinter) _cfgPrettyPrinter : null;\n     }\n@@ -476,7 +485,8 @@ public final void writeFieldName(String name) throws IOException\n         }\n         // Should this ever get called?\n         String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI();\n-        setNextName(new QName(ns, name));\n+        XmlTagProcessor.XmlTagName tagName = _tagProcessor.encodeTag(new XmlTagProcessor.XmlTagName(ns, name));\n+        setNextName(new QName(tagName.namespace, tagName.localPart));\n     }\n     \n     @Override\n", "test_patch": "diff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TagEscapeTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TagEscapeTest.java\nnew file mode 100644\nindex 000000000..d9a301d9c\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/TagEscapeTest.java\n@@ -0,0 +1,118 @@\n+package com.fasterxml.jackson.dataformat.xml.misc;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessors;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class TagEscapeTest extends XmlTestBase {\n+\n+    public static class DTO {\n+        public Map<String, String> badMap = new HashMap<>();\n+\n+        @Override\n+        public String toString() {\n+            return \"DTO{\" +\n+                    \"badMap=\" + badMap.entrySet().stream().map(x -> x.getKey() + \"=\" + x.getValue()).collect(Collectors.joining(\", \", \"[\", \"]\")) +\n+                    '}';\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            DTO dto = (DTO) o;\n+            return Objects.equals(badMap, dto.badMap);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(badMap);\n+        }\n+    }\n+\n+    public void testGoodMapKeys() throws JsonProcessingException {\n+        DTO dto = new DTO();\n+\n+        dto.badMap.put(\"foo\", \"bar\");\n+        dto.badMap.put(\"abc\", \"xyz\");\n+\n+        XmlMapper mapper = new XmlMapper();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        DTO reversed = mapper.readValue(res, DTO.class);\n+\n+        assertEquals(dto, reversed);\n+    }\n+\n+    public void testBase64() throws JsonProcessingException {\n+        DTO dto = new DTO();\n+\n+        dto.badMap.put(\"123\", \"bar\");\n+        dto.badMap.put(\"$ I am <fancy>! &;\", \"xyz\");\n+        dto.badMap.put(\"<!-- No comment=\\\"but' fancy tag!\\\"$ />\", \"xyz\");\n+\n+        XmlMapper mapper = XmlMapper.builder().xmlTagProcessor(XmlTagProcessors.newBase64Processor()).build();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        DTO reversed = mapper.readValue(res, DTO.class);\n+\n+        assertEquals(dto, reversed);\n+    }\n+\n+    public void testAlwaysOnBase64() throws JsonProcessingException {\n+        DTO dto = new DTO();\n+\n+        dto.badMap.put(\"123\", \"bar\");\n+        dto.badMap.put(\"$ I am <fancy>! &;\", \"xyz\");\n+        dto.badMap.put(\"<!-- No comment=\\\"but' fancy tag!\\\"$ />\", \"xyz\");\n+\n+        XmlMapper mapper = XmlMapper.builder().xmlTagProcessor(XmlTagProcessors.newAlwaysOnBase64Processor()).build();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        DTO reversed = mapper.readValue(res, DTO.class);\n+\n+        assertEquals(dto, reversed);\n+    }\n+\n+    public void testReplace() throws JsonProcessingException {\n+        DTO dto = new DTO();\n+\n+        dto.badMap.put(\"123\", \"bar\");\n+        dto.badMap.put(\"$ I am <fancy>! &;\", \"xyz\");\n+        dto.badMap.put(\"<!-- No comment=\\\"but' fancy tag!\\\"$ />\", \"xyz\");\n+\n+        XmlMapper mapper = XmlMapper.builder().xmlTagProcessor(XmlTagProcessors.newReplacementProcessor()).build();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        DTO reversed = mapper.readValue(res, DTO.class);\n+\n+        assertNotNull(reversed);\n+    }\n+\n+    public static class BadVarNameDTO {\n+        public int $someVar$ = 5;\n+    }\n+\n+    public void testBadVarName() throws JsonProcessingException {\n+        BadVarNameDTO dto = new BadVarNameDTO();\n+\n+        XmlMapper mapper = XmlMapper.builder().xmlTagProcessor(XmlTagProcessors.newBase64Processor()).build();\n+\n+        final String res = mapper.writeValueAsString(dto);\n+\n+        BadVarNameDTO reversed = mapper.readValue(res, BadVarNameDTO.class);\n+\n+        assertEquals(dto.$someVar$, reversed.$someVar$);\n+    }\n+\n+}\ndiff --git a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java\nindex ac089a412..2336b1254 100644\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlTokenStreamTest.java\n@@ -7,6 +7,7 @@\n import com.fasterxml.jackson.core.io.ContentReference;\n \n import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n+import com.fasterxml.jackson.dataformat.xml.XmlTagProcessors;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream;\n@@ -178,7 +179,7 @@ private XmlTokenStream _tokensFor(String doc, int flags) throws Exception\n         XMLStreamReader sr = XML_FACTORY.getXMLInputFactory().createXMLStreamReader(new StringReader(doc));\n         // must point to START_ELEMENT, so:\n         sr.nextTag();\n-        XmlTokenStream stream = new XmlTokenStream(sr, ContentReference.rawReference(doc), flags);\n+        XmlTokenStream stream = new XmlTokenStream(sr, ContentReference.rawReference(doc), flags, XmlTagProcessors.newPassthroughProcessor());\n         stream.initialize();\n         return stream;\n     }\n", "fixed_tests": {"com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest": {"run": "NONE", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestIndentation": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestViews": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.VersionInfoTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.MapperCopyTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}}, "p2p_tests": {}, "f2p_tests": {}, "s2p_tests": {}, "n2p_tests": {"com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest": {"run": "NONE", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestIndentation": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestViews": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.VersionInfoTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.MapperCopyTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test": {"run": "PASS", "test": "NONE", "fix": "PASS"}, "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest": {"run": "PASS", "test": "NONE", "fix": "PASS"}}, "run_result": {"passed_count": 109, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.ser.TestIndentation", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "test_patch_result": {"passed_count": 0, "failed_count": 0, "skipped_count": 0, "passed_tests": [], "failed_tests": [], "skipped_tests": []}, "fix_patch_result": {"passed_count": 110, "failed_count": 0, "skipped_count": 0, "passed_tests": ["com.fasterxml.jackson.dataformat.xml.node.JsonNodeMixedContent403Test", "com.fasterxml.jackson.dataformat.xml.ser.TestXmlDeclaration", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilNestingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization", "com.fasterxml.jackson.dataformat.xml.fuzz.FuzzXXX_32969_UTF32Test", "com.fasterxml.jackson.dataformat.xml.deser.EnumDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.NumberDeserWithXMLTest", "com.fasterxml.jackson.dataformat.xml.jaxb.WithJAXBAnnotationsTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeBasicDeserTest", "com.fasterxml.jackson.dataformat.xml.lists.DeserializePolyList178Test", "com.fasterxml.jackson.dataformat.xml.lists.WrappedListsTest", "com.fasterxml.jackson.dataformat.xml.ser.TestJDKSerializability", "com.fasterxml.jackson.dataformat.xml.deser.NonNamespaceAwareDeser422Test", "com.fasterxml.jackson.dataformat.xml.lists.RootListHandlingTest", "com.fasterxml.jackson.dataformat.xml.stream.StreamCapabilitiesTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.PolymorphicTypesTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists86Test", "com.fasterxml.jackson.dataformat.xml.RoundtripContentTest", "com.fasterxml.jackson.dataformat.xml.lists.ListRoundtripTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz463_32872_XmlDeclTest", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedPolymorphicList490Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderWithXmlText345Test", "com.fasterxml.jackson.dataformat.xml.stream.FormatDetectionTest", "com.fasterxml.jackson.dataformat.xml.VersionInfoTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JAXBObjectId170Test", "com.fasterxml.jackson.dataformat.xml.ser.EmptyPolymorphicTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceToBooleanTest", "com.fasterxml.jackson.dataformat.xml.incr.IncrementalWritingTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationOrdering", "com.fasterxml.jackson.dataformat.xml.lists.EmptyListDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlTokenStreamTest", "com.fasterxml.jackson.dataformat.xml.deser.TypeAttributeOrder242Test", "com.fasterxml.jackson.dataformat.xml.misc.ArrayConversionsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest", "com.fasterxml.jackson.dataformat.xml.lists.ListAsObjectTest", "com.fasterxml.jackson.dataformat.xml.misc.UnwrappingWithXMLTest", "com.fasterxml.jackson.dataformat.xml.incr.PartialReadTest", "com.fasterxml.jackson.dataformat.xml.vld.DTDValidationTest", "com.fasterxml.jackson.dataformat.xml.lists.ListSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.RootNameWrapping374Test", "com.fasterxml.jackson.dataformat.xml.deser.builder.BuilderSimpleTest", "com.fasterxml.jackson.dataformat.xml.jaxb.JaxbXmlValue418Test", "com.fasterxml.jackson.dataformat.xml.deser.CaseInsensitiveDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.Issue274PropertyNameTest", "com.fasterxml.jackson.dataformat.xml.deser.convert.CoerceStringToIntsTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyStringValueTest", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test", "com.fasterxml.jackson.dataformat.xml.ser.CustomSerializerTest", "com.fasterxml.jackson.dataformat.xml.ser.TestNamespaces", "com.fasterxml.jackson.dataformat.xml.lists.ListWithAttributesDeserTest", "com.fasterxml.jackson.dataformat.xml.deser.EmptyWithScalarsTest", "com.fasterxml.jackson.dataformat.xml.ser.XsiNilSerializationTest", "com.fasterxml.jackson.dataformat.xml.node.JsonNodeSerUnwrapped441Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser399Test", "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest", "com.fasterxml.jackson.dataformat.xml.misc.TextValueTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilForStringsTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParser442Test", "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest", "com.fasterxml.jackson.dataformat.xml.deser.NullConversionsSkipTest", "com.fasterxml.jackson.dataformat.xml.deser.TestBinaryData", "com.fasterxml.jackson.dataformat.xml.ser.TestSerialization", "com.fasterxml.jackson.dataformat.xml.ser.RawValueSerializationTest", "com.fasterxml.jackson.dataformat.xml.misc.TagEscapeTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser469Test", "com.fasterxml.jackson.dataformat.xml.deser.RootValueDeserTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlParserTest", "com.fasterxml.jackson.dataformat.xml.deser.DelegatingCreator254Test", "com.fasterxml.jackson.dataformat.xml.deser.EmptyBeanDeser318Test", "com.fasterxml.jackson.dataformat.xml.lists.ListAnnotationSharingTest", "com.fasterxml.jackson.dataformat.xml.deser.CoerceFromEmptyStringTest", "com.fasterxml.jackson.dataformat.xml.ser.TestIndentation", "com.fasterxml.jackson.dataformat.xml.vld.W3CSchemaValidationTest", "com.fasterxml.jackson.dataformat.xml.jaxb.AttributesWithJAXBTest", "com.fasterxml.jackson.dataformat.xml.deser.XsiNilBasicTest", "com.fasterxml.jackson.dataformat.xml.vld.RelaxNGValidationTest", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializerCustom", "com.fasterxml.jackson.dataformat.xml.misc.XmlTextTest", "com.fasterxml.jackson.dataformat.xml.misc.DTDSupportTest", "com.fasterxml.jackson.dataformat.xml.misc.BadEncodingTest", "com.fasterxml.jackson.dataformat.xml.deser.TestViews", "com.fasterxml.jackson.dataformat.xml.jaxb.NamespaceViaJAXB18Test", "com.fasterxml.jackson.dataformat.xml.jaxb.BuilderWithJAXB291Test", "com.fasterxml.jackson.dataformat.xml.lists.ListDeser393Test", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationAttr", "com.fasterxml.jackson.dataformat.xml.deser.ExceptionDeserializationTest", "com.fasterxml.jackson.dataformat.xml.MapperCopyTest", "com.fasterxml.jackson.dataformat.xml.fuzz.Fuzz465_32906_CDataReadTest", "com.fasterxml.jackson.dataformat.xml.misc.SequenceWrite493Test", "com.fasterxml.jackson.dataformat.xml.deser.DefaultTyping325Test", "com.fasterxml.jackson.dataformat.xml.deser.ElementWithScalarAndAttr412Test", "com.fasterxml.jackson.dataformat.xml.deser.DeserErrorHandling236Test", "com.fasterxml.jackson.dataformat.xml.misc.StreamingDecoratorsTest", "com.fasterxml.jackson.dataformat.xml.ser.PolymorphicSerialization389Test", "com.fasterxml.jackson.dataformat.xml.interop.NonWoodstoxStaxImpl482Test", "com.fasterxml.jackson.dataformat.xml.deser.SimpleStringValuesTest", "com.fasterxml.jackson.dataformat.xml.jaxb.ElementWrapperTest", "com.fasterxml.jackson.dataformat.xml.lists.ListDeserializationTest", "com.fasterxml.jackson.dataformat.xml.stream.XmlGeneratorTest", "com.fasterxml.jackson.dataformat.xml.lists.PolymorphicList97Test", "com.fasterxml.jackson.dataformat.xml.lists.Issue101UnwrappedListAttributesTest", "com.fasterxml.jackson.dataformat.xml.ser.Base64VariantWriteTest", "com.fasterxml.jackson.dataformat.xml.adapters.TestIssue47Attribute", "com.fasterxml.jackson.dataformat.xml.ser.TestSerializationManual", "com.fasterxml.jackson.dataformat.xml.deser.TestDeserialization", "com.fasterxml.jackson.dataformat.xml.deser.MapDeserializationTest", "com.fasterxml.jackson.dataformat.xml.misc.ObjectId104Test", "com.fasterxml.jackson.dataformat.xml.lists.UnwrappedListWithEmptyCData129Test", "com.fasterxml.jackson.dataformat.xml.deser.UntypedObjectDeserTest"], "failed_tests": [], "skipped_tests": []}, "instance_id": "fasterxml__jackson-dataformat-xml-531"}
